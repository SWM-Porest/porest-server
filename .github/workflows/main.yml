name: porest-prod-cicd

on:
  push:
      branches: ["main"]
      
env:
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_CONTAINER: app
  DOCKER_NETWORK: porest-network
  AWS_REGION: ap-northeast-2

permissions:
  id-token: write
  contents: read
  
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Setup node.js 18.12.1
        uses: actions/setup-node@v3
        with: 
          node-version: 18.12.1
          registry-url: https://npm.pkg.github.com/
      - run: npm install @sentry/cli
      - run: npm install
      - run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: porest/nestjs
          IMAGE_TAG: latest
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
  
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Run Docker
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: porest/nestjs
          IMAGE_TAG: latest
        run: |
          ( docker stop ${{ env.DOCKER_CONTAINER }} || true ) && ( docker rm ${{ env.DOCKER_CONTAINER }} || true )
          docker image pull ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker run --name ${{ env.DOCKER_CONTAINER }} -d -p 80:3000 --restart always -v /home/ubuntu/logs:/app/logs --env-file /home/ubuntu/envs/.env ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker image prune -af
